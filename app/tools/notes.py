from langchain.tools import BaseTool
from langchain.vectorstores import VectorStore
from typing import Type
from pydantic import BaseModel, Field

class VectorSearchInput(BaseModel):
    query: str = Field(..., description='The query to search for relevant documents')

class NotesTool(BaseTool):
    name = 'notes_tool'
    description = 'Searches a vector store for relevant data generated by the user based on a query'
    args_schema: Type[BaseModel] = VectorSearchInput
    
    def __init__(self, vectorstore: VectorStore, k: int = 4):
        super().__init__()
        self.vectorstore = vectorstore
        self.k = k

    def _run(self, query: str) -> str:
        '''Run a similarity search and return the top-k relevant chunks.'''
        results = self.vectorstore.similarity_search(query, k=self.k)
        if not results:
            return 'No relevant data found.'
        return '\n\n'.join([doc.page_content for doc in results])

    async def _arun(self, query: str) -> str:
        '''Run a similarity search and return the top-k relevant chunks.'''
        results = await self.vectorstore.asimilarity_search(query, k=self.k)
        if not results:
            return 'No relevant data found.'
        return '\n\n'.join([doc.page_content for doc in results])
